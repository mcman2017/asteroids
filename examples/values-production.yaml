# Asteroids Game Production Configuration
# Complete configuration for production deployment

# Global configuration
global:
  imageRegistry: "your-registry.com"  # CHANGE THIS to your container registry
  imagePullSecrets: []

# Frontend configuration
frontend:
  image:
    registry: "your-registry.com"  # CHANGE THIS
    repository: "asteroids-frontend"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2  # Multiple replicas for HA
  
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
  
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Backend configuration
backend:
  image:
    registry: "your-registry.com"  # CHANGE THIS
    repository: "asteroids-backend"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2  # Multiple replicas for HA
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  env:
    NODE_ENV: production
    PORT: 3000
  
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 45
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "your-secure-postgres-password"  # CHANGE THIS
    username: "gameuser"
    password: "your-secure-game-password"  # CHANGE THIS
    database: "asteroids"
  
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"  # CHANGE THIS to your storage class
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    
    # Enable backup
    backup:
      enabled: true
      schedule: "0 2 * * *"  # Daily at 2 AM
      retention: 7  # Keep 7 days of backups

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"  # CHANGE THIS to your ingress class
  annotations:
    cert-manager.io/issuer: letsencrypt  # CHANGE THIS to your cert issuer
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; media-src 'none'; object-src 'none'; frame-src 'none';" always;
  hosts:
    - host: asteroids.yourdomain.com  # CHANGE THIS
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls:
    - secretName: asteroids-yourdomain-com-tls  # CHANGE THIS
      hosts:
        - asteroids.yourdomain.com  # CHANGE THIS

# Security context (Production settings)
securityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  capabilities:
    drop:
    - ALL

# Pod security context
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod disruption budget (for HA)
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Horizontal pod autoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Network policy (Security)
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 3000
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: asteroids
      ports:
      - protocol: TCP
        port: 3000
      - protocol: TCP
        port: 5432

# Monitoring (if you have Prometheus)
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels:
      app: asteroids

# Node selection (optional)
nodeSelector:
  kubernetes.io/arch: amd64

# Tolerations (optional)
tolerations: []

# Affinity (for better pod distribution)
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - asteroids
        topologyKey: kubernetes.io/hostname

# Additional labels
commonLabels:
  environment: production
  team: games

# Additional annotations
commonAnnotations:
  deployment.kubernetes.io/revision: "1"
